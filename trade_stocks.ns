/** @param {NS} ns **/
var numBufferMoney = 1000000000;
var numCommissionFee = 100000;
//percentage of max observed price at which to force sale
var numUpperSellThreshold = 0.8;
var numUpperBuyThreshold = 0.75;
var numLowerBuyThreshold = 0.15;
var numMinProfitPercent = 0.05;
//minimum value of minprice / maxprice (ie, variation between min and max)
//required before purchasing. 0.8 ~~ 25% (1.25/1)
var numPriceVariationThreshold = 0.8;
var numForecastMinBuyThreshold = 0.55;
var numWatchTicks = 50;
var numTickMillis = 6000;
var symbols = [];
var strLong = "Long";
var strShort = "Short";

export async function main(ns) {
//	ns.tprint("main()");
	ns.disableLog("sleep");
	initSymbols(ns);
	setMaxBudgetForStocks(ns);
	await watch(ns);

//	for (var i = 0; i < symbols.length; i++) {
//		ns.tprint(symbols[i]);
//	}

	while (true) {
		await trade(ns);
	}
}

//we want to use an object for the symbols, to conveniently store some additional data
//{
//symbol: string,
//minPrice: num,
//maxPrice: num,
//budget: num,
//prevForecast: num
//}
function initSymbols(ns) {
//	ns.tprint("initSymbols()");
	var tempSymbols = ns.stock.getSymbols();

	for (var i = 0; i < tempSymbols.length; i++) {
		symbols.push({	"symbol": tempSymbols[i],
						minPrice: ns.stock.getAskPrice(tempSymbols[i]),
						maxPrice: ns.stock.getAskPrice(tempSymbols[i]),
						budget: 0,
						prevForecast: ns.stock.getForecast(tempSymbols[i])});
	}

//	for (var i = 0; i < symbols.length; i++) {
//		ns.tprint(symbols[i]);
//	}
}

//calculate the maximum investment budget for each symbol
function setMaxBudgetForStocks(ns) {
//	ns.tprint("setMaxBudgetForStocks()");
	var numTotalBudget = (ns.getServerMoneyAvailable("home") - numBufferMoney);
	var numTotalMarketCap = 0;

	for (var i = 0; i < symbols.length; i++) {
		numTotalMarketCap += (ns.stock.getMaxShares(symbols[i].symbol) * ns.stock.getAskPrice(symbols[i].symbol));
	}

	if (numTotalMarketCap <= 0) {
		ns.tprint("numTotalMarketCap is less than or equal to zero");
		exit;
	}

	for (var i = 0; i < symbols.length; i++) {
		if (numTotalMarketCap <= numTotalBudget) {
			symbols[i].budget = ((ns.stock.getMaxShares(symbols[i].symbol) - ns.stock.getPosition(symbols[i].symbol)[0]) * ns.stock.getAskPrice(symbols[i].symbol));
		}
		else {
			symbols[i].budget = (numTotalBudget * ((ns.stock.getMaxShares(symbols[i].symbol) * ns.stock.getAskPrice(symbols[i].symbol)) / numTotalMarketCap));
		}
	}
}

async function watch(ns) {
	ns.print("watch()");
	for (var h = 0; h < numWatchTicks; h++) {
		for (var i = 0; i < symbols.length; i++) {
			var numCurrentPrice = ns.stock.getAskPrice(symbols[i].symbol);
			symbols[i].prevForecast = ns.stock.getForecast(symbols[i].symbol);

			if (numCurrentPrice > symbols[i].maxPrice) {
				symbols[i].maxPrice = numCurrentPrice;
			}
			else if (numCurrentPrice < symbols[i].minPrice) {
				symbols[i].minPrice = numCurrentPrice;
			}
		}

		await ns.sleep(numTickMillis);
	}
}

async function trade(ns) {
//	ns.print("trade()");
	for (var i = 0; i < symbols.length; i++) {
		ns.print("evaluating " + symbols[i].symbol + "...");
		var numVolatility = ns.stock.getVolatility(symbols[i].symbol);
		//this may or may not be the way it is calculated internally (particularly the use of getPrice())
		var numSpreadPercent = ((ns.stock.getAskPrice(symbols[i].symbol) - ns.stock.getBidPrice(symbols[i].symbol)) / ns.stock.getPrice(symbols[i].symbol));
		var numForecast = ns.stock.getForecast(symbols[i].symbol);
		var arrPosition = ns.stock.getPosition(symbols[i].symbol);
		var numCurrentPrice = ns.stock.getAskPrice(symbols[i].symbol);

		//sell long
		if (arrPosition[0] > 0) {
			if ((numCurrentPrice >= (symbols[i].maxPrice * numUpperSellThreshold))
			|| (numForecast < 0.5) && (symbols[i].prevForecast > 0.5)
			|| ((arrPosition[1] < ((1 - numMinProfitPercent) * numCurrentPrice)) && (numCurrentPrice < (symbols[i].minPrice * (1 + numLowerBuyThreshold))))
			) {
				ns.print("	considering long sale...");
				var numGrossProfit = ns.stock.getSaleGain(symbols[i].symbol, arrPosition[0], strLong);
				var numCosts = (arrPosition[0] * arrPosition[1]);
				ns.print("		Potential Gross Profit: " + numGrossProfit);
				ns.print("		Costs: " + numCosts);
				ns.print("		Net Profit: "  + (numGrossProfit - numCosts));
				ns.print("		Net Profit Percent: " + ((numGrossProfit - numCosts) / numCosts));

				if (((numGrossProfit - numCosts) / numCosts) > numMinProfitPercent) {
					var numSalePrice = ns.stock.sell(symbols[i].symbol, arrPosition[0]);
					var numNetProfit = ((arrPosition[0] * numSalePrice) - numCosts - numCommissionFee);
					ns.print("		sold " + arrPosition[0] + " shares of " + symbols[i].symbol + " for " + numNetProfit + " net profit");

					if ((symbols[i].budget + numGrossProfit) < ((ns.stock.getMaxShares(symbols[i].symbol) * numSalePrice) + numCommissionFee)) {
						symbols[i].budget = (symbols[i].budget + numGrossProfit);
					}
					else {
						symbols[i].budget = ((ns.stock.getMaxShares(symbols[i].symbol) * numSalePrice) + numCommissionFee);
					}

					ns.print("		budget for " + symbols[i].symbol + " is now " + symbols[i].budget);
				}
			}
		}

		//sell short
		//if (arrPosition[2] > 0) {
		//ns.stock.getSaleGain(symbols[i].symbol, arrPosition[2], strShort);
		//ns.tprint("considering short sale of " +  + "...");
		//}

		//buy long
		//the use of numUpperSellThreshold in the second condition makes sense at values around 0.8.
		//If the value of that variable changes too much, this may need to be modified
		if (symbols[i].budget > 0) {
			if ((numForecast > symbols[i].prevForecast)
				&& (numForecast > numForecastMinBuyThreshold)
				&& (numCurrentPrice < (symbols[i].maxPrice * numUpperBuyThreshold))
			) {
				ns.print("	considering long purchase...");
				var numSharesToBuy = ns.stock.getMaxShares(symbols[i].symbol);
				numSharesToBuy -= (arrPosition[0] + arrPosition[2]);

				if ((numSharesToBuy * numCurrentPrice) > (symbols[i].budget - numCommissionFee)) {
					ns.print("	not enough money to buy all shares, calculating shares to purchase...");
					numSharesToBuy = Math.floor(((symbols[i].budget - numCommissionFee) / numCurrentPrice));
				}

				var numSharesPurchased = ns.stock.buy(symbols[i].symbol, numSharesToBuy);
				var numPurchaseCosts = ((numSharesPurchased * numCurrentPrice) + numCommissionFee);

				if (numPurchaseCosts > symbols[i].budget) {
					symbols[i].budget = 0;
				}
				else {
					symbols[i].budget = (symbols[i].budget - numPurchaseCosts);
				}

//				ns.print("		purchased " + numSharesPurchased + " shares of " + symbols[i].symbol + " for " + numPurchaseCosts);
				ns.print("		budget for " + symbols[i].symbol + " is now " + symbols[i].budget);
			}
		}

		//buy short
		//ns.stock.short(symbols[i].symbol, num_shares_to_short);

		symbols[i].prevForecast = numForecast;

		if (numCurrentPrice > symbols[i].maxPrice) {
			symbols[i].maxPrice = numCurrentPrice;
		}
		else if (numCurrentPrice < symbols[i].minPrice) {
			symbols[i].minPrice = numCurrentPrice;
		}
	}

	//I am not quite sure how long this takes to run, and I do not want to
	//miss a tic.
	//
	//Also, apparently the game will lock up without this or some other async
	//function within a while(true){} loop
	await ns.sleep((numTickMillis / 2));
}