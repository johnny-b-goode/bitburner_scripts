/** @param {NS} ns **/
export async function main(ns) {
	var bufferMoney = 200000;
	var numSleepInterval = 10;
	var numSleepTimeMax = 3600000;
	var baselineNode = 0;
	var referenceNode = 1;
	var numMaxNodes = 32;

	ns.disableLog("getServerMoneyAvailable");

	if (ns.args.length > 0) {
		if (ns.args[0] >= 0) {
			bufferMoney = ns.args[0];
		}
	}

	if (ns.args.length > 1) {
		if (ns.args[1] > 0) {
			numMaxNodes = ns.args[1];
		}

		if (numMaxNodes > 64) {
			numMaxNodes = 64;
		}
	}

	//0 == new node
	//1 == level
	//2 == ram
	//3 == cores
	function levelUpgradeProfitDeltaPerSec (numUpgradeType) {
		ns.print("levelUpgradeProfitDeltaPerSec()");

		if ((numUpgradeType != 0)
			&& (numUpgradeType != 1)
			&& (numUpgradeType != 2)
			&& (numUpgradeType != 3)
			) {
			ns.print("	ERROR invalid value for numUpgradeType");
		}

		var retVar = 0;
		var nodeStats = ns.hacknet.getNodeStats(referenceNode);
		var numCurrentRate = 0;
		var numFutureRate = 0;

		if (ns.fileExists("Formulas.exe", "home")) {
			ns.print("	performing calculations using Formulas.exe...");
			//https://github.com/danielyxie/bitburner/blob/dev/markdown/bitburner.hacknetnodesformulas.moneygainrate.md
			numCurrentRate = ns.formulas.calculateMoneyGainRate(nodeStats.level, nodeStats.ram, nodeStats.cores, ns.getHacknetMultipliers().production);

			if (numUpgradeType == 0) {
				retVar = numCurrentRate;
			}
			else if (numUpgradeType == 1) {
				numFutureRate = ns.formulas.calculateMoneyGainRate((nodeStats.level + 1), nodeStats.ram, nodeStats.cores, ns.getHacknetMultipliers().production);
				retVar = (numFutureRate - numCurrentRate);
			}
			else if (numUpgradeType == 2) {
				numFutureRate = ns.formulas.calculateMoneyGainRate(nodeStats.level, (nodeStats.ram * 2), nodeStats.cores, ns.getHacknetMultipliers().production);
				retVar = (numFutureRate - numCurrentRate);
			}
			else if (numUpgradeType == 3) {
				numFutureRate = ns.formulas.calculateMoneyGainRate(nodeStats.level, nodeStats.ram, (nodeStats.cores + 1), ns.getHacknetMultipliers().production);
				retVar = (numFutureRate - numCurrentRate);
			}
		}
		else {
			ns.print("	performing calculations using jankyMoneyGainRate()...");
			//just re-implement the formula...
			function jankyMoneyGainRate(numLevel, numRam, numCores) {
				//"getBitNodeMultipliers requires Source-File 5 to run"...
				//return ((1.5 * numLevel) * Math.pow(1.035, numRam - 1) * ((numCores + 5) / 6) * ns.getHacknetMultipliers().production * ns.getBitNodeMultipliers().HacknetNodeMoney);
				return ((1.5 * numLevel) * Math.pow(1.035, numRam - 1) * ((numCores + 5) / 6) * ns.getHacknetMultipliers().production * 1);
			}

			numCurrentRate = jankyMoneyGainRate(nodeStats.level, nodeStats.ram, nodeStats.cores);

			if (numUpgradeType == 0) {
				retVar = numCurrentRate;
			}
			else if (numUpgradeType == 1) {
				numFutureRate = jankyMoneyGainRate((nodeStats.level + 1), nodeStats.ram, nodeStats.cores);
				retVar = (numFutureRate - numCurrentRate);
			}
			else if (numUpgradeType == 2) {
				numFutureRate = jankyMoneyGainRate(nodeStats.level, (nodeStats.ram * 2), nodeStats.cores);
				retVar = (numFutureRate - numCurrentRate);
			}
			else if (numUpgradeType == 3) {
				numFutureRate = jankyMoneyGainRate(nodeStats.level, nodeStats.ram, (nodeStats.cores + 1));
				retVar = (numFutureRate - numCurrentRate);
			}
		}

		ns.print("	change in profitability per sec: " + retVar);
		return retVar;
	}

	function getNewNodeTotalCost() {
		ns.print("getNewNodeTotalCost()");
		var retVar = ns.hacknet.getPurchaseNodeCost();
		retVar += ns.hacknet.getLevelUpgradeCost(baselineNode, (ns.hacknet.getNodeStats(referenceNode).level - 1));
		retVar += ns.hacknet.getRamUpgradeCost(baselineNode, ( + 1));
		retVar += ns.hacknet.getRamUpgradeCost(baselineNode, ((Math.log(ns.hacknet.getNodeStats(referenceNode).ram) - Math.log(1)) / Math.log(2)));
		retVar += ns.hacknet.getCoreUpgradeCost(baselineNode, (ns.hacknet.getNodeStats(referenceNode).cores - 1));

		return retVar;
	}

	function getTotalHacknetProduction () {
		var retVal = 0;

		for (var i = 0; i < ns.hacknet.numNodes(); i++) {
			retVal += ns.hacknet.getNodeStats(i).production;
		}

		if (retVal < 0) {
			retVal = 0;
		}

		return retVal;
	}

	function getWaitTime (numUpgradeCost) {
		//ns.print("getWaitTime()");
		var retVal = 0;

		if (numUpgradeCost > 0) {
			retVal = (numUpgradeCost / getTotalHacknetProduction());

			if (retVal < 0) {
				retVal = 0;
			}
		}

		return retVal;
	}

	function getSleepTime (numUpgradeCost) {
		//ns.print("getSleepTime()");
		var retVal = getWaitTime(numUpgradeCost);
		retVal = Math.ceil(retVal);
		retVal *= 1000;
		retVal += 1000;

		if (retVal < 0) {
			retVal = 0;
		}

		if (retVal > numSleepTimeMax) {
			retVal = numSleepTimeMax;
		}

		return retVal;
	}

	async function normalizeNode(numNodeIndex) {
		//ns.print("normalizeNode()");

		while (ns.hacknet.getNodeStats(numNodeIndex).level < ns.hacknet.getNodeStats(referenceNode).level) {
			if (ns.hacknet.getLevelUpgradeCost(numNodeIndex, 1) < (ns.getServerMoneyAvailable("home") - bufferMoney)) {
				ns.hacknet.upgradeLevel(numNodeIndex, 1);
			}
			else {
				await ns.sleep(getSleepTime((ns.hacknet.getLevelUpgradeCost(numNodeIndex, 1) - (ns.getServerMoneyAvailable("home") - bufferMoney))));
			}
		}

		while (ns.hacknet.getNodeStats(numNodeIndex).ram < ns.hacknet.getNodeStats(referenceNode).ram) {
			if (ns.hacknet.getRamUpgradeCost(numNodeIndex, 1) < (ns.getServerMoneyAvailable("home") - bufferMoney)) {
				ns.hacknet.upgradeRam(numNodeIndex, 1);
			}
			else {
				await ns.sleep(getSleepTime((ns.hacknet.getRamUpgradeCost(numNodeIndex, 1) - (ns.getServerMoneyAvailable("home") - bufferMoney))));
			}
		}

		while (ns.hacknet.getNodeStats(numNodeIndex).cores < ns.hacknet.getNodeStats(referenceNode).cores) {
			if (ns.hacknet.getCoreUpgradeCost(numNodeIndex, 1) < (ns.getServerMoneyAvailable("home") - bufferMoney)) {
				ns.hacknet.upgradeCore(numNodeIndex, 1);
			}
			else {
				await ns.sleep(getSleepTime((ns.hacknet.getCoreUpgradeCost(numNodeIndex, 1) - (ns.getServerMoneyAvailable("home") - bufferMoney))));
			}
		}
	}

	function findMinInArray (arr) {
		ns.print("findMinInArray()");
		var retVar = 0;
		var lowestNumber = arr[0];

		for (var i = 0; i < arr.length; i++) {
			if (arr[i] < lowestNumber) {
				lowestNumber = arr[i];
				retVar = i;
			}
		}

		return retVar;
	}

	while (true) {
		if (ns.hacknet.numNodes() <= 1) {
			ns.print("there are currently no nodes in the hacknet");

			if (ns.hacknet.getPurchaseNodeCost() <= (ns.getServerMoneyAvailable("home") - bufferMoney)) {
				ns.hacknet.purchaseNode();
			}
		}

		//get / keep everything in sync
		for (var i = 0; i < ns.hacknet.numNodes(); i++) {
			//ns.print("evaluating node " + i + " for synchronization...");

			if (ns.hacknet.numNodes() < numMaxNodes) {
				//ns.print("	maximum number of nodes not yet reached...");

				if (i != baselineNode) {
					//ns.print("	" + i + " is not the baseline...");
					await normalizeNode(i);
				}
			}
			else {
				//ns.print("	the maximum number of nodes has been reached...");
				await normalizeNode(i);
			}
		}

		//costs[0] == new node
		//costs[1] == level
		//costs[2] == ram
		//costs[3] == cores
		//TODO I think it might be more accurate to look at the total cost for a new
		//node with the same specs as referenceNode. The reason being that the
		//production for a new node with no upgrades stays the same, and as the cost
		//of a new node increases it will always be evaluated as very unprofitable.
		var costs = [
			getNewNodeTotalCost(),
			(ns.hacknet.getLevelUpgradeCost(referenceNode, 1) * ns.hacknet.numNodes()),
			(ns.hacknet.getRamUpgradeCost(referenceNode, 1) * ns.hacknet.numNodes()),
			(ns.hacknet.getCoreUpgradeCost(referenceNode, 1) * ns.hacknet.numNodes())
		];

		if (ns.hacknet.numNodes() >= numMaxNodes) {
			costs[0] = Infinity;
		}

		var cheapestOption = findMinInArray(costs);
		ns.print("the cheapest option is " + cheapestOption);

		//this is still somewhat naive, but should be considerably better than what I had
		//it does not take into account the incremental purchase of upgrades (vs a new node)
		//
		//this is a relative comparison, so whatever is being compared is always baselined
		//against the cheapestOption
		for (var i = 0; i < costs.length; i++) {
			if (i != cheapestOption) {
				ns.print("----------------------------------------");
				ns.print("evaluating option " + i);
				ns.print("----------------------------------------");
				//If numDeltaTime is positive, then it will take LONGER to get the current option
				//than it will to get the cheapest option. If numDeltaTime is negative then it
				//will take LESS time to get current option than it would to get the cheapest option.
				var numDeltaTime = getWaitTime(costs[i]) - getWaitTime(costs[cheapestOption]);
				var numDeltaMoney = levelUpgradeProfitDeltaPerSec(i);
				var numCheapestOptionMoney = levelUpgradeProfitDeltaPerSec(cheapestOption);
				var numCheapestOptionProfitabilityRatio = (numCheapestOptionMoney / costs[cheapestOption]);

				//if (i != 0) {
				//	numDeltaMoney *= ns.hacknet.numNodes();
				//}

				var numDeltaProfit = 0;

				if (numDeltaTime < 0) {
					numDeltaProfit = (numDeltaMoney * numDeltaTime);
				}
				else if (numDeltaTime > 0) {
					numDeltaProfit = (numCheapestOptionMoney * numDeltaTime);
				}

				var numAdjustedCost = (costs[i] + numDeltaProfit);
				var numProfitabilityRatio = (numDeltaMoney / numAdjustedCost);

				//if (cheapestOption != 0) {
				//	numCheapestOptionMoney *= ns.hacknet.numNodes();
				//}

				ns.print("costs[" + i + "]: " + costs[i]);
				ns.print("numDeltaTime: " + numDeltaTime);
				ns.print("numDeltaMoney: " + numDeltaMoney);
				ns.print("numDeltaProfit: " + numDeltaProfit);
				ns.print("numAdjustedCost: " + numAdjustedCost);
				ns.print("numProfitabilityRatio: " + numProfitabilityRatio);
				ns.print("numCheapestOptionMoney: " + numCheapestOptionMoney);
				ns.print("numCheapestOptionProfitabilityRatio: " + numCheapestOptionProfitabilityRatio);

				if (numProfitabilityRatio > numCheapestOptionProfitabilityRatio) {
					ns.print("option " + i + " with a profitability ratio of " + numProfitabilityRatio + " is better than option "
					+ cheapestOption + " with a profitability ratio of " + numCheapestOptionProfitabilityRatio);
					cheapestOption = i;
				}

				ns.print("----------------------------------------");
			}
		}

		ns.print("costs[0]: " + costs[0]);
		ns.print("costs[1]: " + costs[1]);
		ns.print("costs[2]: " + costs[2]);
		ns.print("costs[3]: " + costs[3]);
		ns.print("the cheapest option is costs[" + findMinInArray(costs) + "]");
		ns.print("the option with the best profitability ratio is costs[" + cheapestOption + "]");

		if (costs[cheapestOption] == Infinity) {
			ns.print("no more upgrades available");
			break;
		}

		if (cheapestOption == 0) {
			costs[cheapestOption] = ns.hacknet.getPurchaseNodeCost();
		}
		else if (cheapestOption == 1) {
			costs[cheapestOption] = ns.hacknet.getLevelUpgradeCost(referenceNode, 1);
		}
		else if (cheapestOption == 2) {
			costs[cheapestOption] = ns.hacknet.getRamUpgradeCost(referenceNode, 1);
		}
		else if (cheapestOption == 3) {
			costs[cheapestOption] = ns.hacknet.getCoreUpgradeCost(referenceNode, 1);
		}

		while (costs[cheapestOption] > (ns.getServerMoneyAvailable("home") - bufferMoney)) {
			await ns.sleep(getSleepTime((costs[cheapestOption] - (ns.getServerMoneyAvailable("home") - bufferMoney))));
		}

		if (costs[cheapestOption] <= (ns.getServerMoneyAvailable("home") - bufferMoney)) {
			if (cheapestOption == 0) {
				//ns.print("purchasing a new node");
				ns.hacknet.purchaseNode();
			}
			else if (cheapestOption == 1) {
				//ns.print("purchasing level upgrade");
				ns.hacknet.upgradeLevel(referenceNode, 1);
			}
			else if (cheapestOption == 2) {
				//ns.print("purchasing ram upgrade");
				ns.hacknet.upgradeRam(referenceNode, 1);
			}
			else if (cheapestOption == 3) {
				//ns.print("purchasing core upgrade");
				ns.hacknet.upgradeCore(referenceNode, 1);
			}
		}

		//to prevent an error
		await ns.sleep(numSleepInterval);
		ns.print("========================================");
	}
}